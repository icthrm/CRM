	{	//RANDOM-SART
	
	float** vecs = new float*[subdirs.size()];
	
	for(int i = 0; i < subdirs.size(); i++){
		vecs[i] = new float[particles[0].datasize];
	}
	
	for(int k = 0; k < opts.iteration; k++){
		for(int i = 0; i < subdirs.size(); i++){
			ATOM(particles[i], info.id, info.procs);
		}
		
		for(int i = 0; i < subdirs.size(); i++){
			//copy for centre particle
			memcpy(vecs[i], particles[i].data, sizeof(float)*particles[i].datasize);
		}
		
		std::vector<int> randarry;
		srand(time(NULL));
		for(int i = 0; i < subdirs.size(); i++){
			int tmp = rand()%subdirs.size();
			bool found = false;
			for(int m = 0; m < randarry.size(); m++){
				if(randarry[m] == tmp){
					found = true;
					break;
				}
			}
			if(found){
				i--;
			}
			else{
				randarry.push_back(tmp);
			}
		}
		
		for(int i = 0; i < subdirs.size(); i++){
			for(int idx = 0; idx < particles[i].datasize; idx++){
				if(mask[idx]){
					particles[i].data[idx] = vecs[randarry[i]][idx];
				}
			}
		}
	}
	
	}
	
	{	//sparse random Kaczmarz-SART
	srand(time(NULL));
	for(int k = 0; k < opts.iteration; k++){
		std::vector<int> randarry;
		
		for(int i = 0; i < subdirs.size(); i++){
			int tmp = rand()%subdirs.size();
			bool found = false;
			for(int m = 0; m < randarry.size(); m++){
				if(randarry[m] == tmp){
					found = true;
					break;
				}
			}
			if(found){
				i--;
			}
			else{
				randarry.push_back(tmp);
			}
		}
		
		for(int i = 0; i < subdirs.size(); i++){
			//copy for centre particle
			int preidx = i-1 >= 0 ? i-1:subdirs.size()-1; 
			for(int idx = 0; idx < particles[randarry[i]].datasize; idx++){
				particles[randarry[i]].data[idx] = particles[randarry[i]].data[idx]*(1-mask[idx])+particles[randarry[preidx]].data[idx]*mask[idx];
			}
			
			ATOM(particles[randarry[i]], info.id, info.procs);
		}
	}
	
	}